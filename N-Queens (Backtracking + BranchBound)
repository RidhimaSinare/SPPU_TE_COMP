#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

bool isSafe(int row, int col, vector<vector<int>>& board, int n)
{
    for(int i=0;i<n;i++)
    {
        if(board[row][i]==1 || board[i][col]==1)return false;
    }

    int i=row, j=col;
    while(i>=0 && j>=0)
    {
        if(board[i][j]==1) return false;
        i--;
        j--;
    }

    i=row; j=col;
    while(i<n && j>=0)
    {
        if(board[i][j]==1) return false;
        i++;
        j--;
    }

    i=row; j=col;
    while(i>=0 && j<n)
    {
        if(board[i][j]==1) return false;
        i--;
        j++;
    }
    
    i=row; j=col;
    while(i<n && j<n)
    {
        if(board[i][j]==1) return false;
        i++;
        j++;
    }

    return true;
}

int countConflicts(int row, int col, vector<vector<int>>& board, int n)
{
    int conflicts = 0;
    for(int i = 0; i < n; i++)
    {
        if(board[i][col] == 1) conflicts++;
        if(board[row][i] == 1) conflicts++;
    }

    int i = row, j = col;
    while(i >= 0 && j >= 0)
    {
        if(board[i][j] == 1) conflicts++;
        i--;
        j--;
    }

    i = row, j = col;
    while(i < n && j >= 0)
    {
        if(board[i][j] == 1) conflicts++;
        i++;
        j--;
    }

    i = row, j = col;
    while(i >= 0 && j < n)
    {
        if(board[i][j] == 1) conflicts++;
        i--;
        j++;
    }

    i = row, j = col;
    while(i < n && j < n)
    {
        if(board[i][j] == 1) conflicts++;
        i++;
        j++;
    }

    return conflicts;
}

bool solveNQueens(vector<vector<int>>& board, int col, int n)
{
    if(col >= n) return true;

    vector<pair<int, int>> conflicts;

    for(int i = 0; i < n; i++)
    {
        if(isSafe(i, col, board, n))
        {
            board[i][col] = 1;
            if(col == n - 1)
            {
                conflicts.push_back({countConflicts(i, col, board, n), i});
            }
            else
            {
                if(solveNQueens(board, col + 1, n))
                {
                    return true;
                }
            }
            board[i][col] = 0;
        }
    }

    if(!conflicts.empty())
    {
        sort(conflicts.begin(), conflicts.end());
        int minConflicts = conflicts[0].first;
        for(auto conflict : conflicts)
        {
            if(conflict.first > minConflicts) break;
            if(solveNQueens(board, col + 1, n))
            {
                return true;
            }
        }
    }

    return false;
}

void printSolution(vector<vector<int>>& board, int n)
{
    for(int i = 0; i < n; i++) 
    {
        for(int j = 0; j < n; j++) 
        {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

int main()
{
    int n;
    cout << "Enter the board size (n): ";
    cin >> n;

    vector<vector<int>> board(n, vector<int>(n, 0));

    if(solveNQueens(board, 0, n))
    {
        cout << "Solution exists: " << endl;
        printSolution(board, n);
    }
    else
    {
        cout << "No solution" << endl;
    }

    return 0;
}
